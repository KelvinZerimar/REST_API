<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sharpility</name>
    </assembly>
    <members>
        <member name="T:Sharpility.Collections.AbstractCompositeDictionary`3">
            <summary>
            Abstraction of CompositeDictionary.
            </summary>
            <typeparam name="TPrimaryKey">Type of primary key</typeparam>
            <typeparam name="TSecondaryKey">Type of secondary key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.AbstractCompositeDictionary`3.CreateDictionary``2(System.Int32)">
            <summary>
            Creates dictionary with given capacity.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="capacity">Dictionary capacity</param>
            <returns>created dictionary</returns>
        </member>
        <member name="M:Sharpility.Collections.AbstractCompositeDictionary`3.CreateDictionary``2">
            <summary>
            Creates dictionary.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <returns>created dictionary</returns>
        </member>
        <member name="M:Sharpility.Collections.AbstractCompositeDictionary`3.CreateList``1(System.Int32)">
            <summary>
            Creates list matching CompositDictionary implementatio with given capacity.
            </summary>
            <typeparam name="T">Type of list item</typeparam>
            <param name="capacity">List capacity</param>
            <returns>created list</returns>
        </member>
        <member name="M:Sharpility.Collections.AbstractCompositeDictionary`3.CreateList``1">
            <summary>
            Creates list matching CompositDictionary implementation.
            </summary>
            <typeparam name="T">Type of list item</typeparam>
            <returns>created list</returns>
        </member>
        <member name="M:Sharpility.Collections.AbstractCompositeDictionary`3.CreateSet``1">
            <summary>
            Creates set.
            </summary>
            <typeparam name="T">Type of set</typeparam>
            <returns>created set</returns>
        </member>
        <member name="T:Sharpility.Collections.AbstractMultiDictionary`2">
            <summary>
            Abstraction of MultiDictionary.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.AbstractMultiDictionary`2.CreateCollection(System.Int32)">
            <summary>
            Creates collection matching MultiDictionary implementation with given capacity.
            </summary>
            <param name="capacity">collection capacity</param>
            <returns>created collection</returns>
        </member>
        <member name="M:Sharpility.Collections.AbstractMultiDictionary`2.ResultCollection(System.Collections.Generic.ICollection{`1})">
            <summary>
            Creates collection matching MultiDictionary implementation.
            </summary>
            <returns>created collection</returns>
        </member>
        <member name="M:Sharpility.Collections.AbstractMultiDictionary`2.ComparableCollection(System.Collections.Generic.ICollection{`1})">
            <summary>
            Created comparable collection from given collection.
            </summary>
            <param name="collection">transformed collection</param>
            <returns>comparable collection</returns>
        </member>
        <member name="T:Sharpility.Collections.AbstractSortedMappedQueue`3">
            <summary>
            Abstraction of sorted mapped queue.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <typeparam name="TQ">Type of queue</typeparam>
        </member>
        <member name="M:Sharpility.Collections.AbstractSortedMappedQueue`3.#ctor(System.Converter{`1,`0},System.Collections.Generic.IComparer{`1},`2)">
            <summary>
            Created AbstractSortedMappedQueue.
            </summary>
            <param name="keyExtractor">Extractor key from value</param>
            <param name="comparer">Comparer of values</param>
            <param name="queue">queue</param>
        </member>
        <member name="M:Sharpility.Collections.AbstractSortedMappedQueue`3.SortQueue(`2,System.Collections.Generic.IComparer{`1})">
            <summary>
            Sorts queue with given comparer.
            </summary>
            <param name="queue">Sorted queue</param>
            <param name="comparer">Comparer of queue items</param>
        </member>
        <member name="T:Sharpility.Collections.ArrayListSortedMappedQueue`2">
            <summary>
            Sorted mapped array list mapped queue.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.ArrayListSortedMappedQueue`2.Create(System.Converter{`1,`0},System.Collections.Generic.IComparer{`1})">
            <summary>
            Created ArrayListSortedMappedQueue.
            </summary>
            <param name="keyExtractor">Extracts key from value</param>
            <param name="comparer">Queue item comparer</param>
            <returns>ArrayListSortedMappedQueue</returns>
        </member>
        <member name="M:Sharpility.Collections.ArrayListSortedMappedQueue`2.Create``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Created ArrayListSortedMappedQueue.
            </summary>
            <param name="comparer">Queue item comparer</param>
            <returns>ArrayListSortedMappedQueue</returns>
        </member>
        <member name="M:Sharpility.Collections.ArrayListSortedMappedQueue`2.Create``1">
            <summary>
            Created ArrayListSortedMappedQueue with comparable items.
            </summary>
            <returns>ArrayListSortedMappedQueue</returns>
        </member>
        <member name="M:Sharpility.Collections.ArrayListSortedMappedQueue`2.Create``2(System.Converter{``1,``0})">
            <summary>
            Created ArrayListSortedMappedQueue with comparable items
            </summary>
            <param name="keyExtractor">Extracts key from value</param>
            <returns>ArrayListSortedMappedQueue</returns>
        </member>
        <member name="T:Sharpility.Collections.CompositeDictionary`3">
            <summary>
            Dictionary containing values mapped by two keys.
            </summary>
            <typeparam name="TPrimaryKey">Type of primary key</typeparam>
            <typeparam name="TSecondaryKey">Type of secondary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.Put(`0,`1,`2)">
            <summary>
            Puts value by primary and secondary key.
            </summary>
            <param name="primaryKey">Primary key value</param>
            <param name="secondaryKey">Secondary key value</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.Put(Sharpility.Collections.CompositeKey{`0,`1},`2)">
            <summary>
            Puts value by composite key.
            </summary>
            <param name="key">Composite key of primary and secondary key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.PutAll(Sharpility.Collections.CompositeDictionary{`0,`1,`2})">
            <summary>
            Puts all values from composite dictionary.
            </summary>
            <param name="compositeDictionary">CompositeDictionary</param>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.PutAll(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IDictionary{`1,`2}})">
            <summary>
            Puts all values from dictionary.
            </summary>
            <param name="dictionary">Dictionary</param>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.Get(Sharpility.Collections.CompositeKey{`0,`1})">
            <summary>
            Returns value for composite key.
            </summary>
            <param name="key">Composite key of primary and secondary key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.Get(`0,`1)">
            <summary>
            Returns value for primary and secondary key.
            </summary>
            <param name="primaryKey">Primary key value</param>
            <param name="secondaryKey">Secondary key value</param>
            <returns>Value</returns>
        </member>
        <member name="P:Sharpility.Collections.CompositeDictionary`3.Item(Sharpility.Collections.CompositeKey{`0,`1})">
            <summary>
            Returns value for composite key.
            </summary>
            <param name="key">Composite key of primary and secondary key</param>
            <returns>Value</returns>
        </member>
        <member name="P:Sharpility.Collections.CompositeDictionary`3.Values">
            <summary>
            Returns all values.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.PrimaryKeyValues(`0)">
            <summary>
            Returns all values for primary key.
            </summary>
            <param name="primaryKey">Primary key</param>
            <returns>Values</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.SecondaryKeyValues(`1)">
            <summary>
            Returns all values for secondary key.
            </summary>
            <param name="secondaryKey">Secondary key</param>
            <returns>Values</returns>
        </member>
        <member name="P:Sharpility.Collections.CompositeDictionary`3.Keys">
            <summary>
            Returns set of composite keys.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.CompositeDictionary`3.PrimaryKeys">
            <summary>
            Retunrs set of primary keys.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.CompositeDictionary`3.SecondaryKeys">
            <summary>
            Retunrs set of secondary keys.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.CompositeDictionary`3.Count">
            <summary>
            Returns all values count.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.CompositeDictionary`3.PrimaryKeysCount">
            <summary>
            Returns number of primary keys.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.CompositeDictionary`3.IsEmpty">
            <summary>
            Checks if dictionary is empty.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.Clear">
            <summary>
            Removes all entries.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.CompositeDictionary`3.Entries">
            <summary>
            Returns all entries.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.PrimaryKeyEntries(`0)">
            <summary>
            Returns all entries for primary key.
            </summary>
            <param name="primaryKey">Primary key value</param>
            <returns>Primary key entries</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.SecondaryKeyEntries(`1)">
            <summary>
            Returns all entries for secondary key.
            </summary>
            <param name="secondaryKey">Secondary key value</param>
            <returns>Secondary key entries</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.Remove(`0,`1)">
            <summary>
            Removes value by primary and secondary key.
            </summary>
            <param name="primaryKey">Primary key value</param>
            <param name="secondaryKey">Secondary key value</param>
            <returns>true if value was removed</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.Remove(Sharpility.Collections.CompositeKey{`0,`1})">
            <summary>
            Removes value by composite key.
            </summary>
            <param name="key">Composite key of primary and secondary key</param>
            <returns>true if value was removed</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.RemoveByPrimaryKey(`0)">
            <summary>
            Removes all values by primary key.
            </summary>
            <param name="primaryKey">Primary key value</param>
            <returns>Removed values</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.RemoveBySecondaryKey(`1)">
            <summary>
            Removes all values by secondary key.
            </summary>
            <param name="secondaryKey">Secondary key value</param>
            <returns>Removed values</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.ContainsKey(`0,`1)">
            <summary>
            Checks is dictionary contains primary and secondary key.
            </summary>
            <param name="primaryKey">Primary key value</param>
            <param name="secondaryKey">Secondary key value</param>
            <returns>true if dictionary contains primary and secondary key</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.ContainsKey(Sharpility.Collections.CompositeKey{`0,`1})">
            <summary>
            Checks is dictionary contains composite key.
            </summary>
            <param name="key">Composite key value</param>
            <returns>true if dictionary contains primary and secondary key</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.ContainsValue(`2)">
            <summary>
            Checks is dictionary contains value.
            </summary>
            <param name="value">Checked value</param>
            <returns>true if dictionary contains given value</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.ContainsPrimaryKeyValue(`0,`2)">
            <summary>
            Checks is dictionary contains value mapped by primary key.
            </summary>
            <param name="primaryKey">Primary key value</param>
            <param name="value">Checked value</param>
            <returns>true if dictionary contains value for given primary key</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.ContainsSecondaryKeyValue(`1,`2)">
            <summary>
            Checks is dictionary contains value mapped by secondary key.
            </summary>
            <param name="secondaryKey">Secondary key value</param>
            <param name="value">Checked value</param>
            <returns>true if dictionary contains value for given secondary key</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.ContainsEntry(`0,`1,`2)">
            <summary>
            Checks is dictionary contains entry of primary-secondary-key, value
            </summary>
            <param name="primaryKey">Primary key value</param>
            <param name="secondaryKey">Secondary key value</param>
            <param name="value">Checked value</param>
            <returns>true if given value is mapped by given primary and secondary key</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.ContainsEntry(Sharpility.Collections.CompositeKey{`0,`1},`2)">
            <summary>
            Checks is dictionary contains entry.
            </summary>
            <param name="key">Entry key</param>
            <param name="value">Checked value</param>
            <returns>true if given value is mapped by given key</returns>
        </member>
        <member name="M:Sharpility.Collections.CompositeDictionary`3.ToDictionary">
            <summary>
            Converts CompositeDictionary to regular dictionary.
            </summary>
            <returns>dictionary</returns>
        </member>
        <member name="T:Sharpility.Collections.CompositeKey`2">
            <summary>
            Key consisting of primary and secondary key.
            </summary>
            <typeparam name="TPrimaryKey">Type of primary key</typeparam>
            <typeparam name="TSecondaryKey">Type of secondary key</typeparam>
        </member>
        <member name="P:Sharpility.Collections.CompositeKey`2.Primary">
            <summary>
            Primary key value.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.CompositeKey`2.Secondary">
            <summary>
            Secondary key value.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.CompositeKey`2.#ctor(`0,`1)">
            <summary>
            Created composite key.
            </summary>
            <param name="primary">Primary key value</param>
            <param name="secondary">Secondary key value</param>
        </member>
        <member name="T:Sharpility.Collections.Concurrent.BlockingQueue`1">
            <summary>
            A Queue that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sharpility.Collections.Concurrent.BlockingQueue`1.Offer(`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available.
            </summary>
            <param name="item">offered element</param>
            <param name="timeout">how long to wait before giving up</param>
            <param name="cancellationToken">cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Sharpility.Collections.Concurrent.BlockingQueue`1.Poll(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.
            </summary>
            <param name="timeout">how long to wait before giving up</param>
            <param name="cancellationToken">cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Sharpility.Collections.Concurrent.BlockingQueue`1.Take">
            <summary>
            Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharpility.Collections.Concurrent.DefaultBlockingQueue`1">
            <summary>
            Implementation of BlockingQueue.
            </summary>
            <typeparam name="T">Type of queue item</typeparam>
        </member>
        <member name="M:Sharpility.Collections.Concurrent.DefaultBlockingQueue`1.#ctor">
            <summary>
            Uses BlockingCollection.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.Concurrent.DefaultBlockingQueue`1.#ctor(System.Int32)">
            <summary>
            Creates blocking queue with bounded queue capacity.
            </summary>
            <param name="boundedCapacity">Queue capacity</param>
        </member>
        <member name="M:Sharpility.Collections.Concurrent.DefaultBlockingQueue`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)">
            <summary>
            Creates blocking from given producer and bounded queue capacity.
            </summary>
            <param name="producer">Producer of blocking producer</param>
            <param name="boundedCapacity">Queue capacity</param>
        </member>
        <member name="M:Sharpility.Collections.Concurrent.DefaultBlockingQueue`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
            <summary>
            Creates blocking queue from given producer.
            </summary>
            <param name="producer">Producer of blocking producer</param>
        </member>
        <member name="T:Sharpility.Collections.DefaultQueue`1">
            <summary>
            Default IQueue implementation using System.Collections.Generic.Queue 
            </summary>
            <typeparam name="T">Type of queue item</typeparam>
        </member>
        <member name="M:Sharpility.Collections.DefaultQueue`1.#ctor">
            <summary>
            Creates new queue.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.DefaultQueue`1.#ctor(System.Int32)">
            <summary>
            Creates queue with given capacity.
            </summary>
            <param name="capacity">Queue capacity</param>
        </member>
        <member name="T:Sharpility.Collections.HashCompositeDictionary`3">
            <summary>
            HashMap implementation of CompositeDictionary.
            </summary>
            <typeparam name="TPrimaryKey">Type of primary key</typeparam>
            <typeparam name="TSecondaryKey">Type of secondary key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.HashCompositeDictionary`3.#ctor(System.Int32,System.Int32)">
            <summary>
            Created composite dictionary with primary and secondary keys capacities.
            </summary>
            <param name="primaryKeyCapacity">Capacity of primary keys</param>
            <param name="secondaryKeyCapacity">Capacity of secondary keys</param>
        </member>
        <member name="M:Sharpility.Collections.HashCompositeDictionary`3.#ctor">
            <summary>
            Created composite dictionary.
            </summary>
        </member>
        <member name="T:Sharpility.Collections.HashSetMultiDictionary`2">
            <summary>
            Implementation of MultiDictionary using HashSet for key values.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.HashSetMultiDictionary`2.#ctor">
            <summary>
            Creates HashSetMultiDictionary
            </summary>
        </member>
        <member name="M:Sharpility.Collections.HashSetMultiDictionary`2.#ctor(System.Int32)">
            <summary>
            Creates HashSetMultiDictionary with given keys capacity.
            </summary>
            <param name="keysCapacity">Capacity of keys</param>
        </member>
        <member name="M:Sharpility.Collections.HashSetMultiDictionary`2.Empty">
            <summary>
            Returns empty HashSetMultiDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharpility.Collections.ImmutableCompositeDictionary`3">
            <summary>
            Immutable implementation of CompositeDictionary.
            </summary>
            <typeparam name="TPrimaryKey">Type of primary key</typeparam>
            <typeparam name="TSecondaryKey">Type of secondary key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.ImmutableCompositeDictionary`3.Builder">
            <summary>
            Builder of ImmutableCompositeDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharpility.Collections.ImmutableCompositeDictionary`3.ImmutableCompositeDictionaryBuilder`3">
            <summary>
            Builder of CompositeDictionary.
            </summary>
            <typeparam name="TPk">Type of primary key</typeparam>
            <typeparam name="TSk">Type of secondary key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.ImmutableCompositeDictionary`3.ImmutableCompositeDictionaryBuilder`3.Put(`3,`4,`5)">
            <summary>
            Puts value into builded composite dictionary.
            </summary>
            <param name="primaryKey">Primary key</param>
            <param name="secondaryKey">Secondary key</param>
            <param name="value">Value</param>
            <returns>Builder instance</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableCompositeDictionary`3.ImmutableCompositeDictionaryBuilder`3.Put(Sharpility.Collections.CompositeKey{`3,`4},`5)">
            <summary>
            Puts value into builded composite dictionary.
            </summary>
            <param name="key">Composite key</param>
            <param name="value">Value</param>
            <returns>Builder instance</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableCompositeDictionary`3.ImmutableCompositeDictionaryBuilder`3.PutAll(Sharpility.Collections.CompositeDictionary{`3,`4,`5})">
            <summary>
            Puts all composite dictionary values into builded composite dictionary.
            </summary>
            <param name="compositeDictionary">Composite dictionary</param>
            <returns>Builder instance</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableCompositeDictionary`3.ImmutableCompositeDictionaryBuilder`3.PutAll(System.Collections.Generic.IDictionary{`3,System.Collections.Generic.IDictionary{`4,`5}})">
            <summary>
            Puts all dictionary values into builded composite dictionary.
            </summary>
            <param name="dictionary">Dictionary</param>
            <returns>Builder instance</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableCompositeDictionary`3.ImmutableCompositeDictionaryBuilder`3.Build">
            <summary>
            Build ImmutableCompositeDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharpility.Collections.ImmutableListMultiDictionary`2">
            <summary>
            Implementation of ImmutableMultiDictionary using ImmutableList for key values.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.ImmutableListMultiDictionary`2.Builder">
            <summary>
            Returns builder of ImmutableListMultiDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableListMultiDictionary`2.Builder(System.Int32,System.Int32)">
            <summary>
            Returns builder of ImmutableListMultiDictionary.
            </summary>
            <param name="keysCapacity">Initial keys capacity</param>
            <param name="valuesCapacity">Intial values capacity</param>
            <returns></returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableListMultiDictionary`2.Empty">
            <summary>
            Returns empty ImmutableListMultiDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharpility.Collections.ImmutableListMultiDictionary`2.ImmutableListMultiDictionaryBuilder">
            <summary>
            Builder of ImmutableListMultiDictionary.
            </summary>
        </member>
        <member name="T:Sharpility.Collections.ImmutableMultiDictionary`2">
            <summary>
            Immutable implementation of MultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.ImmutableMultiDictionary`2.#ctor(System.Collections.Immutable.IImmutableDictionary{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>
            Creates ImmutableMultiDictionary from immutable dictionary.
            </summary>
            <param name="dictionary">Immutable dictionary</param>
        </member>
        <member name="M:Sharpility.Collections.ImmutableMultiDictionary`2.EmptyCollection">
            <summary>
            Returns empty collection matching MultiDictionary implementation.
            </summary>
            <returns>empty collection</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableMultiDictionary`2.MutableCopy(System.Collections.Generic.ICollection{`1})">
            <summary>
            Creates mutable copy of given collection.
            </summary>
            <param name="values">Transformed collection</param>
            <returns>Mutable collection</returns>
        </member>
        <member name="T:Sharpility.Collections.ImmutableMultiDictionary`2.AbstractImmutableListMultiDictionaryBuilder`3">
            <summary>
            Builder of ImmutableMultiDictionary.
            </summary>
            <typeparam name="T">Type dictionary key</typeparam>
            <typeparam name="TV">Type of dictionary value</typeparam>
            <typeparam name="TR">Type of builded ImmutableMultiDictionary</typeparam>
        </member>
        <member name="M:Sharpility.Collections.ImmutableMultiDictionary`2.AbstractImmutableListMultiDictionaryBuilder`3.Put(`2,`3)">
            <summary>
            Puts entry to builded ImmutableMultiDictionary.
            </summary>
            <param name="key">Entry key</param>
            <param name="value">Entry value</param>
            <returns>Builder</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableMultiDictionary`2.AbstractImmutableListMultiDictionaryBuilder`3.PutAll(`2,System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Puts multiple entries for given key to builded ImmutableMultiDictionary.
            </summary>
            <param name="key">Entry key</param>
            <param name="values">Entry values</param>
            <returns>Builder</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableMultiDictionary`2.AbstractImmutableListMultiDictionaryBuilder`3.PutAll(Sharpility.Collections.MultiDictionary{`2,`3})">
            <summary>
            Puts all entries from given MultiDictionary to builded ImmutableMultiDictionary.
            </summary>
            <param name="multiDictionary">multiDictionary</param>
            <returns>Builder</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableMultiDictionary`2.AbstractImmutableListMultiDictionaryBuilder`3.PutAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`2,`3}})">
            <summary>
            Puts all entries to builded ImmutableMultiDictionary.
            </summary>
            <param name="entries">KeyValuePair entries</param>
            <returns>Builder</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableMultiDictionary`2.AbstractImmutableListMultiDictionaryBuilder`3.Build">
            <summary>
            Builds ImmutableMultiDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableMultiDictionary`2.AbstractImmutableListMultiDictionaryBuilder`3.Immutable(System.Collections.Generic.ICollection{`3})">
            <summary>
            Creates immutable copy of given collection.
            </summary>
            <param name="values">Transformed collection</param>
            <returns>Immutable collection</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableMultiDictionary`2.AbstractImmutableListMultiDictionaryBuilder`3.Crete(System.Collections.Immutable.IImmutableDictionary{`2,System.Collections.Generic.ICollection{`3}})">
            <summary>
            Created ImmutableMultiDictionary from immutable dictionary.
            </summary>
            <param name="dictionary">Immutable dictionary</param>
            <returns>ImmutableMultiDictionary</returns>
        </member>
        <member name="T:Sharpility.Collections.ImmutableSetMultiDictionary`2">
            <summary>
            Implementation of ImmutableMultiDictionary using ImmutableSet for key values.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.ImmutableSetMultiDictionary`2.Builder">
            <summary>
            Returns builder of ImmutableSetMultiDictionary.
            </summary>
            <returns>Builder</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableSetMultiDictionary`2.Builder(System.Int32)">
            <summary>
            Returns builder of ImmutableSetMultiDictionary.
            </summary>
            <param name="keysCapacity">Initial keys capacity.</param>
            <returns>Builder</returns>
        </member>
        <member name="M:Sharpility.Collections.ImmutableSetMultiDictionary`2.Empty">
            <summary>
            Returns empty ImmutableSetMultiDictionary.
            </summary>
            <returns>Empty ImmutableSetMultiDictionary</returns>
        </member>
        <member name="T:Sharpility.Collections.ImmutableSetMultiDictionary`2.ImmutableSetMultiDictionaryBuilder">
            <summary>
            Builder of ImmutableSetMultiDictionary.
            </summary>
        </member>
        <member name="T:Sharpility.Collections.IQueue`1">
            <summary>
            A collection designed for holding elements prior to processing.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sharpility.Collections.IQueue`1.Offer(`0)">
            <summary>
            Offers item to queue.
            </summary>
            <param name="item">offered item</param>
            <returns>true if item was accepted</returns>
        </member>
        <member name="M:Sharpility.Collections.IQueue`1.Peek">
            <summary>
            Returns first item in queue
            </summary>
            <returns>first item in queue</returns>
        </member>
        <member name="M:Sharpility.Collections.IQueue`1.Poll">
            <summary>
            Removes and return first item in queue.
            </summary>
            <returns>Removed first queue item</returns>
        </member>
        <member name="M:Sharpility.Collections.IQueue`1.Clear">
            <summary>
            Clears queue.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.IQueue`1.Contains(`0)">
            <summary>
            Checks is queue contains item.
            </summary>
            <param name="item">checkd item</param>
            <returns>is queue contains item</returns>
        </member>
        <member name="P:Sharpility.Collections.IQueue`1.Count">
            <summary>
            Returns number of queue items.
            </summary>
        </member>
        <member name="T:Sharpility.Collections.LinkedListMultiDictionary`2">
            <summary>
            Implementation of MultiDictionary using LinkedList for key values.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.LinkedListMultiDictionary`2.#ctor">
            <summary>
            Creates LinkedListMultiDictionary.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.LinkedListMultiDictionary`2.#ctor(System.Int32)">
            <summary>
            Creates LinkedListMultiDictionary with given keys capacity.
            </summary>
            <param name="keysCapacity">Capacity of keys</param>
        </member>
        <member name="M:Sharpility.Collections.LinkedListMultiDictionary`2.Empty">
            <summary>
            Returns empty LinkedListMultiDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharpility.Collections.LinkedQueue`1">
            <summary>
            IQueue implementation using LinkedList
            </summary>
            <typeparam name="T">Type of queue item</typeparam>
        </member>
        <member name="M:Sharpility.Collections.LinkedQueue`1.#ctor">
            <summary>
            Creates new instance.
            </summary>
        </member>
        <member name="T:Sharpility.Collections.ArrayListMultiDictionary`2">
            <summary>
            Implementation of MultiDictionary using ArrayList for key values.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.ArrayListMultiDictionary`2.#ctor">
            <summary>
            Creates MultiDictionary with array list as values holder.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.ArrayListMultiDictionary`2.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates MultiDictionary with array list as values holder.
            </summary>
            <param name="keysCapacity">Capacity of keys</param>
            <param name="valuesCapacity">Capacity of values</param>
        </member>
        <member name="M:Sharpility.Collections.ArrayListMultiDictionary`2.Empty">
            <summary>
            Returns empty ArrayListMultiDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharpility.Collections.MappedQueue`1">
            <summary>
            Queue with item uniqueness control.
            </summary>
            <typeparam name="T">Type of queue element</typeparam>
        </member>
        <member name="M:Sharpility.Collections.MappedQueue`1.Put(`0)">
            <summary>
            Adds or replace element to queue.
            </summary>
            <param name="element">Offered element</param>
            <returns>True if element was replaced</returns>
        </member>
        <member name="T:Sharpility.Collections.MultiDictionary`2">
            <summary>
            Dictionary that contains multiple values at given key.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.Put(`0,`1)">
            <summary>
            Puts value at given key.
            </summary>
            <param name="key">key value</param>
            <param name="value">value</param>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.PutAll(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Puts multiple values to given key.
            </summary>
            <param name="key"></param>
            <param name="values"></param>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.PutAll(Sharpility.Collections.MultiDictionary{`0,`1})">
            <summary>
            Pults all entries from given multiDictionary.
            </summary>
            <param name="multiDictionary">MultiDictionary</param>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.PutAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Puts all entries.
            </summary>
            <param name="entries">KeyValuePair entries</param>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.Remove(`0)">
            <summary>
            Removes key entries.
            </summary>
            <param name="key">Removed key</param>
            <returns>true - if any value was removed</returns>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.Remove(`0,`1)">
            <summary>
            Removes key-value entry.
            </summary>
            <param name="key">Removed key</param>
            <param name="value">Removed value</param>
            <returns>true if entry was removed</returns>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.RemoveAll(`0)">
            <summary>
            Removes all values at given key.
            </summary>
            <param name="key">Removed keyh</param>
            <returns>Removed values</returns>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.ReplaceValues(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Replaces all values by given key.
            </summary>
            <param name="key">Key value</param>
            <param name="values">Values to replace</param>
            <returns>Replaced values</returns>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.Clear">
            <summary>
            Removes all entries.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.Get(`0)">
            <summary>
            Returns all values mapped by given key.
            </summary>
            <param name="key">Key</param>
            <returns>Values for given key</returns>
        </member>
        <member name="P:Sharpility.Collections.MultiDictionary`2.Item(`0)">
            <summary>
            Returns all values mapped by given key.
            </summary>
            <param name="key">Key</param>
            <returns>Values for given key</returns>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.ContainsKey(`0)">
            <summary>
            Checks is dictionary contains given key.
            </summary>
            <param name="key">Checked key</param>
            <returns>true if any value is stored by given key</returns>
        </member>
        <member name="P:Sharpility.Collections.MultiDictionary`2.Count">
            <summary>
            Returns number of all values.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.ValuesCount(`0)">
            <summary>
            Returns number of all values stored by given key.
            </summary>
            <param name="key">Key</param>
            <returns>Number of all values stored by given key</returns>
        </member>
        <member name="P:Sharpility.Collections.MultiDictionary`2.Keys">
            <summary>
            Returns set of all keys.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.MultiDictionary`2.Values">
            <summary>
            Returns all values.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.MultiDictionary`2.Entries">
            <summary>
            Returns all entries.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.MultiDictionary`2.MultiEntries">
            <summary>
            Returns entries with multiple values for given key.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.MultiDictionary`2.IsEmpty">
            <summary>
            Checks is dictionary is emtpy.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.ContainsValue(`1)">
            <summary>
            Checks is dictionary contains given value.
            </summary>
            <param name="value">Checked value</param>
            <returns>true if value is stored in dictionary</returns>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.ContainsEntry(`0,`1)">
            <summary>
            Checks is dictionary contains given entry.
            </summary>
            <param name="key">Checked key</param>
            <param name="value">Checked value</param>
            <returns>true if entry is stored in dictionary</returns>
        </member>
        <member name="M:Sharpility.Collections.MultiDictionary`2.ToDictionary">
            <summary>
            Converts multi dictionary to regular dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharpility.Collections.SortedMappedQueue`1">
            <summary>
            Mapped queue with sorted elements.
            </summary>
            <typeparam name="T">Type of queue element</typeparam>
        </member>
        <member name="T:Sharpility.Collections.SortedSetMappedQueue`2">
            <summary>
            SortedSet implementation of SortedMappedQueue.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Sharpility.Collections.SortedSetMappedQueue`2.Create(System.Converter{`1,`0},System.Collections.Generic.IComparer{`1})">
            <summary>
            Creates SortedMappedQueue.
            </summary>
            <param name="keyExtractor">Extracts key from value</param>
            <param name="comparer">Queue items comparer</param>
            <returns>SortedMappedQueue</returns>
        </member>
        <member name="M:Sharpility.Collections.SortedSetMappedQueue`2.Create``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates SortedMappedQueue with same type for key and values.
            </summary>
            <typeparam name="T">Type of key and queue items</typeparam>
            <param name="comparer">Comparer of queue items</param>
            <returns>SortedMappedQueue</returns>
        </member>
        <member name="M:Sharpility.Collections.SortedSetMappedQueue`2.Create``1">
            <summary>
            Creates SortedMappedQueue with same type for key and values that are comparable.
            </summary>
            <typeparam name="T">Type of queue and key items</typeparam>
            <returns>SortedMappedQueue</returns>
        </member>
        <member name="M:Sharpility.Collections.SortedSetMappedQueue`2.Create``2(System.Converter{``1,``0})">
            <summary>
            Creates SortedMappedQueue with comparable queue items.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="keyExtractor">Extracts key from value</param>
            <returns>SortedMappedQueue</returns>
        </member>
        <member name="T:Sharpility.Collections.OrderedHashImmutableDictionary`2">
            <summary>
            HashMap implementation of OrderedImmutableDictionary.
            </summary>
            <typeparam name="T">Type of dictionary key</typeparam>
            <typeparam name="TV">Type of dictionary vlaue</typeparam>
        </member>
        <member name="M:Sharpility.Collections.OrderedHashImmutableDictionary`2.Builder">
            <summary>
            Builder of OrderedImmutableDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharpility.Collections.OrderedHashImmutableDictionary`2.OrderedHashImmutableDictionaryBuilder">
            <summary>
            Builder of OrderedHashImmutableDictionary.
            </summary>
        </member>
        <member name="M:Sharpility.Collections.OrderedHashImmutableDictionary`2.OrderedHashImmutableDictionaryBuilder.Put(`0,`1)">
            <summary>
            Puts value at given key into builder dictionary.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <returns>Builder instance</returns>
        </member>
        <member name="M:Sharpility.Collections.OrderedHashImmutableDictionary`2.OrderedHashImmutableDictionaryBuilder.Put(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Puts entry into builder dictionary.
            </summary>
            <param name="entry">Dictionary entry</param>
            <returns>Builder instance</returns>
        </member>
        <member name="M:Sharpility.Collections.OrderedHashImmutableDictionary`2.OrderedHashImmutableDictionaryBuilder.PutAll(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Puts all entries into builder dictionary.
            </summary>
            <param name="entries">Entries</param>
            <returns>Builder instance</returns>
        </member>
        <member name="M:Sharpility.Collections.OrderedHashImmutableDictionary`2.OrderedHashImmutableDictionaryBuilder.Build">
            <summary>
            Builds OrderedImmutableDictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharpility.Collections.OrderedImmutableDictionary`2">
            <summary>
            Immutable dictionary holding putted keys order.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
        </member>
        <member name="P:Sharpility.Collections.OrderedImmutableDictionary`2.OrderedKeys">
            <summary>
            Dictionary keys with put order.
            </summary>
        </member>
        <member name="P:Sharpility.Collections.OrderedImmutableDictionary`2.OrderedEntries">
            <summary>
            Entry set sorted by keys put order.
            </summary>
        </member>
        <member name="T:Sharpility.Extensions.CollectionExtensions">
            <summary>
            Collections extensions.
            </summary>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.AddAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds items to this collection.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="source">this</param>
            <param name="items">added items</param>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.AddAll``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds items to this collection.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="source">this</param>
            <param name="items">added items</param>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove items from this collection.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="source">this</param>
            <param name="items">removed items</param>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Remove items from this collection.
            </summary>
            <typeparam name="T">Type of item</typeparam>
            <param name="source">this</param>
            <param name="items">removed items</param>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ConvertAll``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1})">
            <summary>
            Convert collection items to another type and returns new collection.
            </summary>
            <typeparam name="T">Type of source collection item</typeparam>
            <typeparam name="TV">Type of destination collection item</typeparam>
            <param name="source">Source collection</param>
            <param name="converter">Item converter</param>
            <returns>Converted collection</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ConvertAll``2(System.Collections.Generic.ISet{``0},System.Converter{``0,``1})">
            <summary>
            Convert collection items to another type and returns new collection.
            </summary>
            <typeparam name="T">Type of source collection item</typeparam>
            <typeparam name="TV">Type of destination collection item</typeparam>
            <param name="source">Source collection</param>
            <param name="converter">Item converter</param>
            <returns>Converted collection</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks is collection contains all of given items.
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="source">this</param>
            <param name="items">checked items</param>
            <returns>true if collection contais all of given items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.Contains(System.Collections.IEnumerable,System.Object)">
            <summary>
            Checks is collection contais item.
            </summary>
            <param name="source">this</param>
            <param name="item">checked item</param>
            <returns>true if collection contais item</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.Count(System.Collections.IEnumerable)">
            <summary>
            Returns number of items in collection.
            </summary>
            <param name="source">this</param>
            <returns>number if items in collection</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ItemType(System.Collections.IEnumerable)">
            <summary>
            Returns type of item accepted by this collection.
            </summary>
            <param name="source">this</param>
            <returns>type of item accepted by this collection</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ContainsAll(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Checks is collection contains all of given items.
            </summary>
            <param name="source">this</param>
            <param name="items">checked items</param>
            <returns>true if collection contais all of given items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks is collection does not contains any items.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <returns>true if collection is empty</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Checks is collection does not contains any items.
            </summary>
            <param name="source">this</param>
            <returns>true if collection is empty</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks is collection contains any items.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <returns>true if collection is not empty</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.IsNotEmpty(System.Collections.IEnumerable)">
            <summary>
            Checks is collection contains any items.
            </summary>
            <param name="source">this</param>
            <returns>true if collection is not empty</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.IsSingleton``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks is collection contains only one item.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <returns>true if collection contais only one item</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.IsSingleton(System.Collections.IEnumerable)">
            <summary>
            Checks is collection contains only one item.
            </summary>
            <param name="source">this</param>
            <returns>true if collection contais only one item</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.Minus``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns collection with removed items.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="items">removed items</param>
            <returns>new collection with removed items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.Minus``1(System.Collections.Immutable.IImmutableSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns immutable collection with removed items.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="items">removed items</param>
            <returns>new collection with removed items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.Minus``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns collection with removed items.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="items">removed items</param>
            <returns>new collection with removed items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.Minus``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns immutable collection with removed items.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="items">removed items</param>
            <returns>new collection with removed items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.Plus``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns collection with added items.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="items">added items</param>
            <returns>new collection with added items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.Plus``1(System.Collections.Immutable.IImmutableSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns immutable collection with added items.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="items">added items</param>
            <returns>new collection with added items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.Plus``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns collection with added items.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="items">added items</param>
            <returns>new collection with added items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.Plus``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns immutable collection with added items.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="items">added items</param>
            <returns>new collection with added items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.Sort``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts this collection.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="comparer">optional comparer</param>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.RemoveFirst``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Removes first item from this collection.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <returns>Removed item</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ToQueue``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Wraps this queue in IQueue contract.
            </summary>
            <typeparam name="T">Type of queue element</typeparam>
            <param name="source">this</param>
            <returns>IQueue</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ToQueue``1(System.Collections.Concurrent.ConcurrentQueue{``0})">
            <summary>
            Wraps this queue in IQueue contract.
            </summary>
            <typeparam name="T">Type of queue element</typeparam>
            <param name="source">this</param>
            <returns>IQueue</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.FindAll``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Returns filtered collection items by given predicate.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="filter">Item filter</param>
            <returns>Filtered collection</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.FindAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns filtered collection items by given predicate.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="filter">Item filter</param>
            <returns>Filtered collection</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ToSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts collection to collection.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <returns>Set</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.FindAll``1(System.Collections.Generic.ISet{``0},System.Predicate{``0})">
            <summary>
            Returns filtered collection items by given predicate.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="filter">Item filter</param>
            <returns>Filtered collection</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ToMultiDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1},System.Converter{``0,``2})">
            <summary>
            Converts collection to MultiDictionary
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">collection</param>
            <param name="keyConverter">Key converter</param>
            <param name="valueConverter">Value converter</param>
            <returns>MultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ToMultiDictionary``2(System.Collections.Generic.IEnumerable{``1},System.Converter{``1,``0})">
            <summary>
            Maps collection values by keys and returns MultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of collection value</typeparam>
            <param name="source">collection</param>
            <param name="keyConverter">Key converter</param>
            <returns>MultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.DistinctElementCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Maps collection items to number of occurrences.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <returns>Dictionary (item, itemCount)</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.TopSlice``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Returns slice of collection items from top.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="size">Slice size</param>
            <returns>Slice of top items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.BottomSlice``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Returns slice of collection items from bottom.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="size">Slice size</param>
            <returns>Slice of bottom items</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.SetLast``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Puts element as last item in collection. If collection element is added.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="element">Element</param>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.SetFirst``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Puts element as first item in collection. If collection element is added.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="element">Element</param>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Checks is collection contains any of given elements.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">Enumerable</param>
            <param name="elements">Checked elements</param>
            <returns>true if any element is in collection, false otherwise</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.SortBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sort collection using given comparer.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="source">this</param>
            <param name="comparer">Comparer used for collection</param>
            <returns>Sorted collection as collection</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ToComparable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts collection to comparable collection with equals/hashCode/toString implementations.
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="source">this</param>
            <returns>Comparable collection</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ToComparable``1(System.Collections.Generic.ISet{``0})">
            <summary>
            Converts collection to comparable collection with equals/hashCode/toString implementations.
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="source">this</param>
            <returns>Comparable collection</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ToComparable``1(System.Collections.Generic.IList{``0})">
            <summary>
            Converts collection to comparable collection with equals/hashCode/toString implementations.
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="source">this</param>
            <returns>Comparable collection</returns>
        </member>
        <member name="M:Sharpility.Extensions.CollectionExtensions.ToComparable``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Converts collection to comparable collection with equals/hashCode/toString implementations.
            </summary>
            <typeparam name="T">Type of collection</typeparam>
            <param name="source">this</param>
            <returns>Comparable collection</returns>
        </member>
        <member name="T:Sharpility.Extensions.ComparerExtensions">
            <summary>
            Extensions of IComparer class.
            </summary>
        </member>
        <member name="M:Sharpility.Extensions.ComparerExtensions.Reverse``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns comparer in reversed order.
            </summary>
            <typeparam name="T">Type of compared item</typeparam>
            <param name="source">this</param>
            <returns>Reversed order comparer</returns>
        </member>
        <member name="T:Sharpility.Extensions.CountdownEventExtensions">
            <summary>
            Extensions for CountdownEvent
            </summary>
        </member>
        <member name="M:Sharpility.Extensions.CountdownEventExtensions.TrySignal(System.Threading.CountdownEvent)">
            <summary>
            Signals if current count is greater than zero.
            </summary>
            <param name="source">source</param>
        </member>
        <member name="T:Sharpility.Extensions.DateTimeExtensions">
            <summary>
            Extensions of DateTime stuct.
            </summary>
        </member>
        <member name="M:Sharpility.Extensions.DateTimeExtensions.ToMilliseconds(System.DateTime)">
            <summary>
            Returns number of milliseconds from 1970-01-01
            </summary>
            <param name="source">this</param>
            <returns>number of milliseconds</returns>
        </member>
        <member name="M:Sharpility.Extensions.DateTimeExtensions.IsAfter(System.DateTime,System.DateTime)">
            <summary>
            Checks is source DateTime is after given DateTime.
            Supports Local and UTC kind comparation.
            </summary>
            <param name="source">Source DateTime</param>
            <param name="dateTime">DateTime compared to</param>
            <returns></returns>
        </member>
        <member name="M:Sharpility.Extensions.DateTimeExtensions.IsAfterOrEquals(System.DateTime,System.DateTime)">
            <summary>
            Checks is source DateTime is after or equal given DateTime.
            Supports Local and UTC kind comparation.
            </summary>
            <param name="source">Source DateTime</param>
            <param name="dateTime">DateTime compared to</param>
            <returns></returns>
        </member>
        <member name="M:Sharpility.Extensions.DateTimeExtensions.IsBefore(System.DateTime,System.DateTime)">
            <summary>
            Checks is source DateTime is before given DateTime.
            Supports Local and UTC kind comparation.
            </summary>
            <param name="source">Source DateTime</param>
            <param name="dateTime">DateTime compared to</param>
            <returns></returns>
        </member>
        <member name="M:Sharpility.Extensions.DateTimeExtensions.IsBeforeOrEquals(System.DateTime,System.DateTime)">
            <summary>
            Checks is source DateTime is before or equal given DateTime.
            Supports Local and UTC kind comparation.
            </summary>
            <param name="source">Source DateTime</param>
            <param name="dateTime">DateTime compared to</param>
            <returns></returns>
        </member>
        <member name="M:Sharpility.Extensions.DateTimeExtensions.IsEqualsTo(System.DateTime,System.DateTime)">
            <summary>
            Checks is source DateTime is equal given DateTime.
            Supports Local and UTC kind comparation.
            </summary>
            <param name="source">Source DateTime</param>
            <param name="dateTime">DateTime compared to</param>
            <returns></returns>
        </member>
        <member name="M:Sharpility.Extensions.DateTimeExtensions.ToDate(System.DateTime)">
            <summary>
            Converts DateTime to Date with 00:00:00 time.
            </summary>
            <param name="source">this</param>
            <returns>Date</returns>
        </member>
        <member name="M:Sharpility.Extensions.DateTimeExtensions.PlusDays(System.DateTime,System.UInt32)">
            <summary>
            Returns DateTime instance with days instance addition to it.
            </summary>
            <param name="source">this</param>
            <param name="days">Number of days added</param>
            <returns>DateTime with days added</returns>
        </member>
        <member name="M:Sharpility.Extensions.DateTimeExtensions.MinusDays(System.DateTime,System.UInt32)">
            <summary>
            Returns DateTime instance with days instance substracted from it.
            </summary>
            <param name="source">this</param>
            <param name="days">Number of days substracted</param>
            <returns>DateTime with substracted days</returns>
        </member>
        <member name="T:Sharpility.Extensions.DbCommandExtensions">
            <summary>
            Extensions for IDbCommand interface.
            </summary>
        </member>
        <member name="M:Sharpility.Extensions.DbCommandExtensions.SetParameter(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Sets command named parameter value.
            </summary>
            <param name="source">DB command</param>
            <param name="name">Parameter name</param>
            <param name="value">Paramater value</param>
        </member>
        <member name="T:Sharpility.Extensions.MultiDictionaryExtensions">
            <summary>
            Extensions for MultiDictionary.
            </summary>
        </member>
        <member name="M:Sharpility.Extensions.MultiDictionaryExtensions.ToImmutableMultiDictionary``2(Sharpility.Collections.MultiDictionary{``0,``1})">
            <summary>
            Converts MultiDictionary to ImmutableMultiDictionary.
            If MultiDictionary is already immutable returns it.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">Converted MultiDictionary</param>
            <returns>ImmutableMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.MultiDictionaryExtensions.ToImmutableListMultiDictionary``2(Sharpility.Collections.MultiDictionary{``0,``1})">
            <summary>
            Converts MultiDictionary to ImmutableListMultiDictionary.
            If MultiDictionary is already ImmutableListMultiDictionary returns it.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">Converted MultiDictionary</param>
            <returns>ImmutableListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.MultiDictionaryExtensions.ToImmutableSetMultiDictionary``2(Sharpility.Collections.MultiDictionary{``0,``1})">
            <summary>
            Converts MultiDictionary to ImmutableSetMultiDictionary.
            If MultiDictionary is already ImmutableSetMultiDictionary returns it.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">Converted MultiDictionary</param>
            <returns>ImmutableSetMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.MultiDictionaryExtensions.IsNotEmpty``2(Sharpility.Collections.MultiDictionary{``0,``1})">
            <summary>
            Checks is multi dictionary is not empty.
            </summary>
            <typeparam name="TKey">Type of MultiDictionary key</typeparam>
            <typeparam name="TValue">Type of MultiDictionary value</typeparam>
            <param name="source">this</param>
            <returns>True if not empty, False otherwise</returns>
        </member>
        <member name="T:Sharpility.Extensions.NameValueCollectionExtensions">
            <summary>
            Extensions of NameValueCollection.
            </summary>
        </member>
        <member name="M:Sharpility.Extensions.NameValueCollectionExtensions.IntValue(System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            Returns int value from NameValueCollection. If property not set returns given default.
            </summary>
            <param name="source">this</param>
            <param name="propertyName">Property name</param>
            <param name="defaultValue">Property default value</param>
            <returns>Property int value or default</returns>
        </member>
        <member name="M:Sharpility.Extensions.NameValueCollectionExtensions.IntValue(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Returns int value from NameValueCollection. If property not set returns null.
            </summary>
            <param name="source">this</param>
            <param name="propertyName">Property name</param>
            <returns>Property int value or null</returns>
        </member>
        <member name="M:Sharpility.Extensions.NameValueCollectionExtensions.BoolValue(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Returns boolean value from NameValueCollection.
            </summary>
            <param name="source">this</param>
            <param name="propertyName">Property name</param>
            <returns>Property boolean value</returns>
        </member>
        <member name="M:Sharpility.Extensions.NameValueCollectionExtensions.BoolValue(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            Returns boolean value from NameValueCollection. If not property not set returns given default.
            </summary>
            <param name="source">this</param>
            <param name="propertyName">Property name</param>
            <param name="defaultValue">Property default value</param>
            <returns>Property boolean value or default</returns>
        </member>
        <member name="M:Sharpility.Extensions.NameValueCollectionExtensions.TimeSpanValue(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Returns TimeSpan value from NameValueCollection. If property not set returns null.
            </summary>
            <param name="source">this</param>
            <param name="propertyName">Property name</param>
            <returns>Property TimeSpan value or null</returns>
        </member>
        <member name="M:Sharpility.Extensions.NameValueCollectionExtensions.TimeSpanValue(System.Collections.Specialized.NameValueCollection,System.String,System.TimeSpan)">
            <summary>
            Returns TimeSpan value from NameValueCollection. If not property set returns given default.
            </summary>
            <param name="source">this</param>
            <param name="propertyName">Property name</param>
            <param name="defaultValue">Default property value</param>
            <returns>Property TimeSpan value or default</returns>
        </member>
        <member name="T:Sharpility.Extensions.TimeSpanExtensions">
            <summary>
            Extensions for TimeSpan.
            </summary>
        </member>
        <member name="M:Sharpility.Extensions.TimeSpanExtensions.TruncateTo(System.TimeSpan,Sharpility.Time.TimeUnit)">
            <summary>
            Truncate TimeSpan to given unit.
            </summary>
            <param name="source">this</param>
            <param name="unit">Time unit</param>
            <returns>Truncated TimeSPan</returns>
        </member>
        <member name="M:Sharpility.Extensions.TimeSpanExtensions.ToMillis(System.TimeSpan)">
            <summary>
            Converts TimeSpan to milliseconds.
            </summary>
            <param name="source">this</param>
            <returns>Total number of full milliseconds</returns>
        </member>
        <member name="M:Sharpility.Extensions.TimeSpanExtensions.ToSeconds(System.TimeSpan)">
            <summary>
            Converts TimeSpan to seconds.
            </summary>
            <param name="source">this</param>
            <returns>Total number of full seconds</returns>
        </member>
        <member name="M:Sharpility.Extensions.TimeSpanExtensions.ToMinutes(System.TimeSpan)">
            <summary>
            Converts TimeSpan to minutes.
            </summary>
            <param name="source">this</param>
            <returns>Total number of full minutes</returns>
        </member>
        <member name="M:Sharpility.Extensions.TimeSpanExtensions.ToHours(System.TimeSpan)">
            <summary>
            Converts TimeSpan to hours.
            </summary>
            <param name="source">this</param>
            <returns>Total number of full hours</returns>
        </member>
        <member name="T:Sharpility.Extensions.DictionaryExtensions">
            <summary>
            Dictionary extensions.
            </summary>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.Put``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Puts value into this dictionary by given key.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.Put``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Puts key-value entry into this dictionary.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="entry">entry</param>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.PutAll``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Puts all entries from given dictionary into this dictionary.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="values">entires</param>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.PutAll``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1}[])">
            <summary>
            Puts key-value entries into this dictionary.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="entries">entry</param>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.PutAll``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Puts key-value entries into this dictionary.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="entries">entry</param>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns dictionary value by given key.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.Get``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Returns dictionary value by given key.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.Get``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Returns dictionary value by given key.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.Get``2(System.Collections.Immutable.ImmutableDictionary{``0,``1},``0)">
            <summary>
            Returns dictionary value by given key.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.GetIfPresent``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns dictionary value by given key.
            If key not present returns null.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.GetIfPresent``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Returns dictionary value by given key.
            If key not present returns null.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.GetIfPresent``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Returns dictionary value by given key.
            If key not present returns null.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.GetIfPresent``2(System.Collections.Immutable.ImmutableDictionary{``0,``1},``0)">
            <summary>
            Returns dictionary value by given key.
            If key not present returns null.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.GetIfPresent``2(System.Collections.Generic.IDictionary{``0,System.Nullable{``1}},``0)">
            <summary>
            Returns dictionary value by given key.
            If key not present returns null.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.GetIfPresent``2(System.Collections.Generic.IReadOnlyDictionary{``0,System.Nullable{``1}},``0)">
            <summary>
            Returns dictionary value by given key.
            If key not present returns null.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.GetIfPresent``2(System.Collections.Generic.Dictionary{``0,System.Nullable{``1}},``0)">
            <summary>
            Returns dictionary value by given key.
            If key not present returns null.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.GetIfPresent``2(System.Collections.Immutable.ImmutableDictionary{``0,System.Nullable{``1}},``0)">
            <summary>
            Returns dictionary value by given key.
            If key not present returns null.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <param name="key">Key</param>
            <returns>Value</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.Entries``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Returns key-value entries set.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <returns>Set of dictionary entries</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.Entries``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Returns key-value entries set.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <returns>Set of dictionary entries</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.Entries``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Returns key-value entries set.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <returns>Set of dictionary entries</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.Entries``2(System.Collections.Immutable.ImmutableDictionary{``0,``1})">
            <summary>
            Returns key-value entries set.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="source">this</param>
            <returns>Set of dictionary entries</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToArrayListMultiDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts dictionary to ArrayListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ArrayListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToArrayListMultiDictionary``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Converts dictionary to ArrayListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ArrayListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToArrayListMultiDictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Converts dictionary to ArrayListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ArrayListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToArrayListMultiDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1})">
            <summary>
            Converts dictionary to ArrayListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ArrayListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToLinkedListMultiDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts dictionary to LinkedListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>LinkedListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToLinkedListMultiDictionary``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Converts dictionary to LinkedListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>LinkedListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToLinkedListMultiDictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Converts dictionary to LinkedListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>LinkedListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToLinkedListMultiDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1})">
            <summary>
            Converts dictionary to LinkedListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>LinkedListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToHashSetMultiDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts dictionary to HashSetMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>HashSetMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToHashSetMultiDictionary``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Converts dictionary to HashSetMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>HashSetMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToHashSetMultiDictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Converts dictionary to HashSetMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>HashSetMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToHashSetMultiDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1})">
            <summary>
            Converts dictionary to HashSetMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>HashSetMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToImmutableListMultiDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts dictionary to ImmutableListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ImmutableListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToImmutableListMultiDictionary``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Converts dictionary to ImmutableListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ImmutableListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToImmutableListMultiDictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Converts dictionary to ImmutableListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ImmutableListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToImmutableListMultiDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1})">
            <summary>
            Converts dictionary to ImmutableListMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ImmutableListMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToImmutableSetMultiDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts dictionary to ImmutableSetMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ImmutableSetMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToImmutableSetMultiDictionary``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Converts dictionary to ImmutableSetMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ImmutableSetMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToImmutableSetMultiDictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Converts dictionary to ImmutableSetMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ImmutableSetMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToImmutableSetMultiDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1})">
            <summary>
            Converts dictionary to ImmutableSetMultiDictionary.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>ImmutableSetMultiDictionary</returns>
        </member>
        <member name="M:Sharpility.Extensions.DictionaryExtensions.ToComparable``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Converts dictionary into comparable dictionary with equals/hashCode/toString implementations.
            </summary>
            <typeparam name="TKey">Type of dictionary key</typeparam>
            <typeparam name="TValue">Type of dictionary value</typeparam>
            <param name="source">this</param>
            <returns>Comparable dictionary</returns>
        </member>
        <member name="T:Sharpility.Extensions.ObjectExtensions">
            <summary>
            Extensions of object class.
            </summary>
        </member>
        <member name="M:Sharpility.Extensions.ObjectExtensions.EqualsByProperties(System.Object,System.Object)">
            <summary>
            Checks object equality by comparing properties.
            Collections are supported.
            </summary>
            <param name="source">this</param>
            <param name="that">compared object</param>
            <returns>true if objects properties are equals</returns>
        </member>
        <member name="M:Sharpility.Extensions.ObjectExtensions.EqualsByFields(System.Object,System.Object)">
            <summary>
            Checks object equality by comparing fields.
            Collections are supported.
            </summary>
            <param name="source">this</param>
            <param name="that">compared object</param>
            <returns>true if objects fields are equals</returns>
        </member>
        <member name="M:Sharpility.Extensions.ObjectExtensions.EqualsByMembers(System.Object,System.Object)">
            <summary>
            Checks object equality by comparing properties and fields.
            Collections are supported.
            </summary>
            <param name="source">this</param>
            <param name="that">compared object</param>
            <returns>true if objects properties and fields are equals</returns>
        </member>
        <member name="M:Sharpility.Extensions.ObjectExtensions.PropertiesHash(System.Object)">
            <summary>
            Generates object hashCode from properties.
            Collections are supported.
            </summary>
            <param name="source">this</param>
            <returns>hashCode</returns>
        </member>
        <member name="M:Sharpility.Extensions.ObjectExtensions.FieldsHash(System.Object)">
            <summary>
            Generated object hashCode from fields.
            Collections are supported.
            </summary>
            <param name="source">this</param>
            <returns>hashCode</returns>
        </member>
        <member name="M:Sharpility.Extensions.ObjectExtensions.MembersHash(System.Object)">
            <summary>
            Generated object hashCode from properties and fields.
            Collections are supported.
            </summary>
            <param name="source">this</param>
            <returns>hashCode</returns>
        </member>
        <member name="M:Sharpility.Extensions.ObjectExtensions.PropertiesToString(System.Object,System.Boolean)">
            <summary>
            Generate toString implementation using object properties.
            </summary>
            <param name="source">this</param>
            <param name="skipNulls">true if null properties should be excluded, false by default</param>
            <returns>toString</returns>
        </member>
        <member name="M:Sharpility.Extensions.ObjectExtensions.FieldsToString(System.Object,System.Boolean)">
            <summary>
            Generate toString implementation using object fields.
            </summary>
            <param name="source">this</param>
            <param name="skipNulls">true if null properties should be excluded, false by default</param>
            <returns>toString</returns>
        </member>
        <member name="M:Sharpility.Extensions.ObjectExtensions.MembersToString(System.Object,System.Boolean)">
            <summary>
            Generate toString implementation using object properties and fields.
            </summary>
            <param name="source">this</param>
            <param name="skipNulls">true if null properties should be excluded, false by default</param>
            <returns>toString</returns>
        </member>
        <member name="T:Sharpility.Extensions.StringExtensions">
            <summary>
            String extensions.
            </summary>
        </member>
        <member name="M:Sharpility.Extensions.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            Returns repeated string by given times.
            </summary>
            <param name="source">this</param>
            <param name="count">number of repetitions</param>
            <returns>repeated string</returns>
        </member>
        <member name="M:Sharpility.Extensions.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Convert string to byte array in given encoding.
            </summary>
            <param name="source">this</param>
            <param name="encoding">encoding, if not provided Encoding.Default</param>
            <returns>byte array</returns>
        </member>
        <member name="M:Sharpility.Extensions.StringExtensions.ToAsciiBytes(System.String)">
            <summary>
            Converts string to byte array in ASCII encoding.
            </summary>
            <param name="source">this</param>
            <returns>ASCII byte array</returns>
        </member>
        <member name="M:Sharpility.Extensions.StringExtensions.ToUtf8Bytes(System.String)">
            <summary>
            Converts string to byte array in UTF-8 encoding.
            </summary>
            <param name="source">this</param>
            <returns>UTF-8 byte array</returns>
        </member>
        <member name="M:Sharpility.Extensions.StringExtensions.EqualsIgnoreCases(System.String,System.String)">
            <summary>
            Compares string with case ignore.
            </summary>
            <param name="source">this</param>
            <param name="comparedTo">compared to</param>
            <returns>true if is equal</returns>
        </member>
        <member name="T:Sharpility.Function.BiConsumer`2">
            <summary>
            Consumes two inputs.
            </summary>
            <typeparam name="TInput1">First input type</typeparam>
            <typeparam name="TInput2">Second input type</typeparam>
            <param name="input1">First input</param>
            <param name="input2">Second input</param>
        </member>
        <member name="T:Sharpility.Function.BiConverter`3">
            <summary>
            Converts two inputs into output.
            </summary>
            <typeparam name="TInput1">First input type</typeparam>
            <typeparam name="TInput2">Second input type</typeparam>
            <typeparam name="TOutput">Output type</typeparam>
            <param name="input1">First input</param>
            <param name="input2">Second input</param>
            <returns>Output</returns>
        </member>
        <member name="T:Sharpility.Function.Consumer`1">
            <summary>
            Consumes input.
            </summary>
            <typeparam name="TInput">Type of input</typeparam>
            <param name="input">consumed input</param>
        </member>
        <member name="T:Sharpility.IO.EmbeddedResources">
            <summary>
            Utility for embedded resources.
            </summary>
        </member>
        <member name="T:Sharpility.IO.Files">
            <summary>
            Files utilities.
            </summary>
        </member>
        <member name="M:Sharpility.IO.Files.DeleteIfExists(System.String)">
            <summary>
            Deletes file if exists.
            </summary>
            <param name="file">file to delete</param>
            <returns>true if file was deleted, false if not</returns>
        </member>
        <member name="M:Sharpility.IO.Files.DeleteDirectoryRecursiveIfExists(System.String)">
            <summary>
            Deletes exiting directory recursively.
            </summary>
            <param name="directory">Directory to delete</param>
            <returns>True when existing directory was deleted</returns>
        </member>
        <member name="M:Sharpility.IO.Files.TryDeleteFile(System.String)">
            <summary>
            Tries to delete file.
            </summary>
            <param name="file">file to delete</param>
            <returns>True if file was deleted, false if not</returns>
        </member>
        <member name="M:Sharpility.IO.Files.TryDeleteDirectoryRecursive(System.String)">
            <summary>
            Tries to delete directory recursively.
            </summary>
            <param name="directory">Directory to delete</param>
            <returns>True if directory was deleted</returns>
        </member>
        <member name="P:Sharpility.IO.Files.AssemblyDirectory">
            <summary>
            Returns executing assembly directory.
            </summary>
        </member>
        <member name="P:Sharpility.IO.Files.HomeDirectory">
            <summary>
            Returns user home directory.
            </summary>
        </member>
        <member name="M:Sharpility.IO.Files.TrimEndingDirectorySeparator(System.String)">
            <summary>
            Removes ending directory separator from path.
            </summary>
            <param name="path">path</param>
            <returns>path with ending directory separator removed</returns>
        </member>
        <member name="T:Sharpility.IO.Streams">
            <summary>
            Utility for streams.
            </summary>
        </member>
        <member name="M:Sharpility.IO.Streams.ReadAll(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            Read stream content as string.
            Stream is not closed.
            </summary>
            <param name="stream">stream</param>
            <param name="encoding">encoding, Encoding.Default if not provided</param>
            <param name="bufferSize">bufferSize, 1024 if not provided</param>
            <returns>stream content</returns>
        </member>
        <member name="T:Sharpility.Net.HttpHeaders">
            <summary>
            Const of standard http headers.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.CacheControl">
            <summary>
            Cache-Control header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.ContentLength">
            <summary>
            Content-Length header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.ContentType">
            <summary>
            Content-Type header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Date">
            <summary>
            Date header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Pragma">
            <summary>
            Pragma header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Via">
            <summary>
            Via header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Warning">
            <summary>
            Warning header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Accept">
            <summary>
            Accept header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AcceptCharset">
            <summary>
            Accept-Charset header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AcceptEncoding">
            <summary>
            Accept-Encoding header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AcceptLanguage">
            <summary>
            Accept-Language header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AccessControlRequestHeaders">
            <summary>
            Access-Control-Request-Headers header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AccessControlRequestMethod">
            <summary>
            Access-Control-Request-Method header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Authorization">
            <summary>
            Authorization header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Connection">
            <summary>
            Connection header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Cookie">
            <summary>
            Cookie header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Expect">
            <summary>
            Expect header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.From">
            <summary>
            From header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.FollowOnlyWhenPrerenderShown">
            <summary>
            Follow-Only-When-Prerender-Shown header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Host">
            <summary>
            Host header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.IfMatch">
            <summary>
            If-Match header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.IfModifiedSince">
            <summary>
            If-Modified-Since header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.IfNoneMatch">
            <summary>
            If-None-Match header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.IfRange">
            <summary>
            IfRange header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.IfUnmodifiedSince">
            <summary>
            If-Unmodified-Since header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.LastEventId">
            <summary>
            Last-Event-ID header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.MaxForwards">
            <summary>
            Max-Forwards header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Origin">
            <summary>
            Origin header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.ProxyAuthorization">
            <summary>
            Proxy-Authorization header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Range">
            <summary>
            Range header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Referer">
            <summary>
            Referer header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Te">
            <summary>
            TE header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Upgrade">
            <summary>
            Upgrade header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.UserAgent">
            <summary>
            User-Agent header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AcceptRanges">
            <summary>
            Accept-Ranges header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AccessControlAllowHeaders">
            <summary>
            Access-Control-Allow-Headers header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AccessControlAllowMethods">
            <summary>
            Access-Control-Allow-Methods header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AccessControlAllowOrigin">
            <summary>
            Access-Control-Allow-Origin header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AccessControlAllowCredentials">
            <summary>
            Access-Control-Allow-Credentials header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AccessControlExposeHeaders">
            <summary>
            Access-Control-Expose-Headers header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.AccessControlMaxAge">
            <summary>
            Access-Control-Max-Age header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Age">
            <summary>
            Age header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.Allow">
            <summary>
            Allow header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.ContentDisposition">
            <summary>
            Content-Disposition header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.ContentEncoding">
            <summary>
            Content-Encoding header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.ContentLanguage">
            <summary>
            Content-Language header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.ContentLocation">
            <summary>
            Content-Location header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.ContentMd5">
            <summary>
            Content-MD5 header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.ContentRange">
            <summary>
            Content-Range header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.WwwAuthenticate">
            <summary>
            WWW-Authenticate header.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpHeaders.XForwardedFor">
            <summary>
            X-Forwarded-For header.
            </summary>
        </member>
        <member name="T:Sharpility.Net.HttpMethod">
            <summary>
            Enum with http method types.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpMethod.Get">
            <summary>
            GET method.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpMethod.Post">
            <summary>
            POST method.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpMethod.Delete">
            <summary>
            DELETE method.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpMethod.Put">
            <summary>
            PUT method.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpMethod.Patch">
            <summary>
            PATCH method.
            </summary>
        </member>
        <member name="F:Sharpility.Net.HttpMethod.Options">
            <summary>
            OPTIONS method.
            </summary>
        </member>
        <member name="T:Sharpility.Net.MediaTypes">
            <summary>
            Consts of standard content types.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.ApplicationAtomXml">
            <summary>
            ATOM XML
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.ApplicationFormUrlencoded">
            <summary>
            WWW Form.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.ApplicationJson">
            <summary>
            JSON.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.ApplicationOctetStream">
            <summary>
            Stream.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.ApplicationXhtmlXml">
            <summary>
            XHTML.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.ApplicationXml">
            <summary>
            XML.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.ImageGif">
            <summary>
            GIF image.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.ImageJpeg">
            <summary>
            JPEG image.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.ImagePng">
            <summary>
            PNG image.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.MultipartFormData">
            <summary>
            Form.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.TextHtml">
            <summary>
            HTML.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.TextPlain">
            <summary>
            Plain text.
            </summary>
        </member>
        <member name="F:Sharpility.Net.MediaTypes.TextXml">
            <summary>
            Text/Xml.
            </summary>
        </member>
        <member name="T:Sharpility.Time.Clock">
            <summary>
            Provides current time.
            </summary>
        </member>
        <member name="P:Sharpility.Time.Clock.CurrentTime">
            <summary>
            Returns current time.
            </summary>
        </member>
        <member name="T:Sharpility.Time.DateRange">
            <summary>
            Date interval between two dateTimes.
            </summary>
        </member>
        <member name="P:Sharpility.Time.DateRange.From">
            <summary>
            DateTime From
            </summary>
        </member>
        <member name="P:Sharpility.Time.DateRange.To">
            <summary>
            DateTime To
            </summary>
        </member>
        <member name="M:Sharpility.Time.DateRange.Of(System.DateTime,System.DateTime)">
            <summary>
            Create new DateRange instance.
            </summary>
            <param name="from">DateTime From</param>
            <param name="to">DateTiem To</param>
            <returns>DateRange</returns>
        </member>
        <member name="M:Sharpility.Time.DateRange.Of(System.String,System.String,System.IFormatProvider)">
            <summary>
            Create new DateRange instance from.
            </summary>
            <param name="from">DateTime From parsed using DateTime Parse</param>
            <param name="to">DateTime From parsed using DateTime Parse</param>
            <param name="format">Date time format</param>
            <returns>DateRange</returns>
        </member>
        <member name="M:Sharpility.Time.DateRange.Contains(System.DateTime)">
            <summary>
            Checks is date is between date range interval.
            </summary>
            <param name="date">checked date</param>
            <returns>true if date is between date range interval</returns>
        </member>
        <member name="P:Sharpility.Time.DateRange.Duration">
            <summary>
            Returns date range duration.
            </summary>
        </member>
        <member name="M:Sharpility.Time.DateRange.ToArray">
            <summary>
            Converts date range to two elements array { From, To}.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sharpility.Time.FixedClock">
            <summary>
            Clock with fixed time.
            </summary>
        </member>
        <member name="M:Sharpility.Time.FixedClock.At(System.DateTime)">
            <summary>
            Create new clock instance at given time.
            </summary>
            <param name="time">time</param>
            <returns>clock</returns>
        </member>
        <member name="M:Sharpility.Time.FixedClock.AtThisInstance">
            <summary>
            Create new clock instance at current time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sharpility.Time.FixedClock.Set(System.DateTime)">
            <summary>
            Sets clock time.
            </summary>
            <param name="time"></param>
        </member>
        <member name="T:Sharpility.Time.SystemClock">
            <summary>
            Clock implementations using DataTime.Now for currentTime.
            </summary>
        </member>
        <member name="M:Sharpility.Time.SystemClock.Create">
            <summary>
            Creates new instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sharpility.Time.SystemClock.UTC">
            <summary>
            UTC system clock.
            </summary>
        </member>
        <member name="T:Sharpility.Time.TimeUnit">
            <summary>
            Time unit enum.
            </summary>
        </member>
        <member name="F:Sharpility.Time.TimeUnit.Millisecond">
            <summary>
            Millisecond.
            </summary>
        </member>
        <member name="F:Sharpility.Time.TimeUnit.Second">
            <summary>
            Second.
            </summary>
        </member>
        <member name="F:Sharpility.Time.TimeUnit.Minute">
            <summary>
            Minute.
            </summary>
        </member>
        <member name="F:Sharpility.Time.TimeUnit.Hour">
            <summary>
            Hour.
            </summary>
        </member>
        <member name="F:Sharpility.Time.TimeUnit.Day">
            <summary>
            Day.
            </summary>
        </member>
        <member name="T:Sharpility.Util.Booleans">
            <summary>
            Utils for bools.
            </summary>
        </member>
        <member name="M:Sharpility.Util.Booleans.TryParse(System.String)">
            <summary>
            Tries to parse bool from string. When parsing fails returns null.
            </summary>
            <param name="value">String value to parse</param>
            <returns>bool or null</returns>
        </member>
        <member name="T:Sharpility.Util.Comparers">
            <summary>
            Comparers utils.
            </summary>
        </member>
        <member name="M:Sharpility.Util.Comparers.OfComparables``1">
            <summary>
            Creates comparer for comparable objects.
            </summary>
            <typeparam name="T">Type of comparable object</typeparam>
            <returns>Comparer</returns>
        </member>
        <member name="M:Sharpility.Util.Comparers.CompareBy``2(System.Converter{``0,``1})">
            <summary>
            Creates comparer with comparable extractor.
            </summary>
            <typeparam name="T">Type of compared object</typeparam>
            <typeparam name="TC">Type of comparable object</typeparam>
            <param name="comparableConverter">Converter of comparable object</param>
            <returns>Comparer</returns>
        </member>
        <member name="T:Sharpility.Util.CompositeKeys">
            <summary>
            Utility for CompisiteKey class.
            </summary>
        </member>
        <member name="M:Sharpility.Util.CompositeKeys.Of``2(``0,``1)">
            <summary>
            Creates composite key.
            </summary>
            <typeparam name="T">Type of primary key</typeparam>
            <typeparam name="TV">Type of secondary key</typeparam>
            <param name="primary">Primary key value</param>
            <param name="secondary">Secondary key value</param>
            <returns>CompositeKey</returns>
        </member>
        <member name="T:Sharpility.Util.DateTimes">
            <summary>
            Utilities for DateTime.
            </summary>
        </member>
        <member name="M:Sharpility.Util.DateTimes.FromMilliseconds(System.Int64)">
            <summary>
            Created date time from millisconds since year 1970 in UTC zone.
            </summary>
            <param name="milliseconds">Number of millisconds since year 1970</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Sharpility.Util.DateTimes.Latest(System.DateTime,System.DateTime)">
            <summary>
            Returns latest date.
            </summary>
            <param name="first">First of compared dates</param>
            <param name="second">Second of compared dates </param>
            <returns>Latest date</returns>
        </member>
        <member name="M:Sharpility.Util.DateTimes.Earliest(System.DateTime,System.DateTime)">
            <summary>
            Returns earliest date.
            </summary>
            <param name="first">First of compared dates</param>
            <param name="second">Second of compared dates </param>
            <returns>Earliest date</returns>
        </member>
        <member name="T:Sharpility.Util.Dictionaries">
            <summary>
            Dictionary utils.
            </summary>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.CreateFromEntries``2(System.Collections.Generic.KeyValuePair{``0,``1}[])">
            <summary>
            Creates dictionary instance from KeyValuePair entries.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="entries">entries</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Create``2(``0,``1)">
            <summary>
            Creates dictionary instance with given key and value.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key">key</param>
            <param name="value">Value</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Create``2(``0,``1,``0,``1)">
            <summary>
            Creates dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Create``2(``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Create``2(``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Create``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Create``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <param name="key6">key6</param>
            <param name="value6">Value6</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Create``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <param name="key6">key6</param>
            <param name="value6">Value6</param>
            <param name="key7">key7</param>
            <param name="value7">Value7</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Create``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <param name="key6">key6</param>
            <param name="value6">Value6</param>
            <param name="key7">key7</param>
            <param name="value7">Value7</param>
            <param name="key8">key8</param>
            <param name="value8">Value8</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Create``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <param name="key6">key6</param>
            <param name="value6">Value6</param>
            <param name="key7">key7</param>
            <param name="value7">Value7</param>
            <param name="key8">key8</param>
            <param name="value8">Value8</param>
            <param name="key9">key9</param>
            <param name="value9">Value9</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Create``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <param name="key6">key6</param>
            <param name="value6">Value6</param>
            <param name="key7">key7</param>
            <param name="value7">Value7</param>
            <param name="key8">key8</param>
            <param name="value8">Value8</param>
            <param name="key9">key9</param>
            <param name="value9">Value9</param>
            <param name="key10">key10</param>
            <param name="value10">Value10</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.CreateImmutable``2(``0,``1)">
            <summary>
            Creates immutable dictionary instance with given key and value.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key">key</param>
            <param name="value">Value</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.CreateImmutable``2(``0,``1,``0,``1)">
            <summary>
            Creates immutable dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.CreateImmutable``2(``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates immutable dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.CreateImmutable``2(``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates immutable dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.CreateImmutable``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates immutable dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.CreateImmutable``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates immutable dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <param name="key6">key6</param>
            <param name="value6">Value6</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.CreateImmutable``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates immutable dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <param name="key6">key6</param>
            <param name="value6">Value6</param>
            <param name="key7">key7</param>
            <param name="value7">Value7</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.CreateImmutable``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates immutable dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <param name="key6">key6</param>
            <param name="value6">Value6</param>
            <param name="key7">key7</param>
            <param name="value7">Value7</param>
            <param name="key8">key8</param>
            <param name="value8">Value8</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.CreateImmutable``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates immutable dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <param name="key6">key6</param>
            <param name="value6">Value6</param>
            <param name="key7">key7</param>
            <param name="value7">Value7</param>
            <param name="key8">key8</param>
            <param name="value8">Value8</param>
            <param name="key9">key9</param>
            <param name="value9">Value9</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.CreateImmutable``2(``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1,``0,``1)">
            <summary>
            Creates immutable dictionary instance with given keys and values.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of value</typeparam>
            <param name="key1">key1</param>
            <param name="value1">Value1</param>
            <param name="key2">key2</param>
            <param name="value2">Value2</param>
            <param name="key3">key3</param>
            <param name="value3">Value3</param>
            <param name="key4">key4</param>
            <param name="value4">Value4</param>
            <param name="key5">key5</param>
            <param name="value5">Value5</param>
            <param name="key6">key6</param>
            <param name="value6">Value6</param>
            <param name="key7">key7</param>
            <param name="value7">Value7</param>
            <param name="key8">key8</param>
            <param name="value8">Value8</param>
            <param name="key9">key9</param>
            <param name="value9">Value9</param>
            <param name="key10">key10</param>
            <param name="value10">Value10</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Entry``2(``0,``1)">
            <summary>
            Creates key-obj entry.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of obj</typeparam>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <returns>entry</returns>
        </member>
        <member name="M:Sharpility.Util.Dictionaries.Empty``2">
            <summary>
            Creates empty dictionary instance.
            </summary>
            <typeparam name="T">Type of key</typeparam>
            <typeparam name="TV">Type of obj</typeparam>
            <returns>empty dictionary</returns>
        </member>
        <member name="T:Sharpility.Util.Hashes">
            <summary>
            Hashes Utility.
            </summary>
        </member>
        <member name="M:Sharpility.Util.Hashes.Md5(System.String,System.Text.Encoding)">
            <summary>
            Generates MD5 hash in hex string.
            </summary>
            <param name="value">Hashed value</param>
            <param name="encoding">Hash encoding, Encoding.Default if not provided</param>
            <returns>MD5 hash</returns>
        </member>
        <member name="M:Sharpility.Util.Hashes.Md5(System.IO.Stream)">
            <summary>
            Generates MD5 hash in hex string.
            </summary>
            <param name="inputStream">Input stream to hash</param>
            <returns>MD5 hash</returns>
        </member>
        <member name="M:Sharpility.Util.Hashes.Sha1(System.String,System.Text.Encoding)">
            <summary>
            Generates SHA-1 hash in hex string.
            </summary>
            <param name="value">Hashed value</param>
            <param name="encoding">Hash encoding, Encoding.Default if not provided</param>
            <returns>SHA-1 hash</returns>
        </member>
        <member name="M:Sharpility.Util.Hashes.Sha1(System.IO.Stream)">
            <summary>
            Generates SHA-1 hash in hex string.
            </summary>
            <param name="inputStream">Input stream to hash</param>
            <returns>SHA-1 hash</returns>
        </member>
        <member name="M:Sharpility.Util.Hashes.Sha256(System.String,System.Text.Encoding)">
            <summary>
            Generates SHA-256 hash in hex string.
            </summary>
            <param name="value">Hashed value</param>
            <param name="encoding">Hash encoding, Encoding.Default if not provided</param>
            <returns>SHA-256 hash</returns>
        </member>
        <member name="M:Sharpility.Util.Hashes.Sha256(System.IO.Stream)">
            <summary>
            Generates SHA-256 hash in hex string.
            </summary>
            <param name="inputStream">Input stream to hash</param>
            <returns>SHA-256 hash</returns>
        </member>
        <member name="T:Sharpility.Util.InstanceCreator">
            <summary>
            Utility for creating instance of given type.
            Created objects does not require public or empty constructors.
            </summary>
        </member>
        <member name="M:Sharpility.Util.InstanceCreator.CreateInstance``1">
            <summary>
            Creates instance of given type.
            </summary>
            <typeparam name="T">Type of created object</typeparam>
            <returns>Instance of given type</returns>
        </member>
        <member name="M:Sharpility.Util.InstanceCreator.CreateInstance(System.Type)">
             <summary>
             Creates instance of given type.
             </summary>
             <param name="type">Type of created object</param>
            <returns>Instance of given type</returns>
        </member>
        <member name="T:Sharpility.Util.Lists">
            <summary>
            Lists utils.
            </summary>
        </member>
        <member name="M:Sharpility.Util.Lists.EmptyList``1">
            <summary>
            Creates empty immutable list.
            </summary>
            <typeparam name="T">Type of list item</typeparam>
            <returns>empty list</returns>
        </member>
        <member name="M:Sharpility.Util.Lists.EmptyMutableList``1">
            <summary>
            Creates empty mutable list.
            </summary>
            <typeparam name="T">Type of list item</typeparam>
            <returns>empty list</returns>
        </member>
        <member name="M:Sharpility.Util.Lists.Singleton``1(``0)">
            <summary>
            Create single element immutable list.
            </summary>
            <typeparam name="T">Type of list item</typeparam>
            <param name="element">list element</param>
            <returns>single element list</returns>
        </member>
        <member name="M:Sharpility.Util.Lists.NullSafeList``1(System.Collections.Generic.IList{``0})">
            <summary>
            If given list is null returns empty list.
            </summary>
            <typeparam name="T">Type of list item</typeparam>
            <param name="list">list</param>
            <returns>null safe list</returns>
        </member>
        <member name="M:Sharpility.Util.Lists.AsList``1(``0[])">
            <summary>
            Creates new list from given values.
            </summary>
            <typeparam name="T">Type of list item</typeparam>
            <param name="values">values</param>
            <returns>list</returns>
        </member>
        <member name="M:Sharpility.Util.Lists.AsLinkedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates new linked list from given values.
            </summary>
            <typeparam name="T">Type of list item</typeparam>
            <param name="values">values</param>
            <returns>linked list</returns>
        </member>
        <member name="M:Sharpility.Util.Lists.IsGenericEnumerable(System.Object)">
            <summary>
            Checks is object is implements generic IEnumerable interface.
            </summary>
            <param name="obj">object</param>
            <returns>true if object is generic IEnumerable</returns>
        </member>
        <member name="M:Sharpility.Util.Lists.IsGenericCollection(System.Object)">
            <summary>
            Checks is object is implements generic ICollection interface.
            </summary>
            <param name="obj">object</param>
            <returns>true if object is generic ICollection</returns>
        </member>
        <member name="M:Sharpility.Util.Lists.IsGenericList(System.Object)">
            <summary>
            Checks is object is implements generic IList interface.
            </summary>
            <param name="obj">object</param>
            <returns>true if object is generic IList</returns>
        </member>
        <member name="T:Sharpility.Util.MultiComparer">
            <summary>
            Utility for building for converting comparers into one.
            </summary>
        </member>
        <member name="M:Sharpility.Util.MultiComparer.Of``1(System.Collections.Generic.IComparer{``0}[])">
            <summary>
            Creates comparer consisting of given comparers.
            </summary>
            <typeparam name="T">Type of compared item</typeparam>
            <param name="comparers">Comparers</param>
            <returns>Multi comparer</returns>
        </member>
        <member name="M:Sharpility.Util.MultiComparer.Of``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IComparer{``0}})">
            <summary>
            Creates comparer consisting of given comparers.
            </summary>
            <typeparam name="T">Type of compared item</typeparam>
            <param name="comparers">Comparers</param>
            <returns>Multi comparer</returns>
        </member>
        <member name="T:Sharpility.Util.Sets">
            <summary>
            Sets utilis.
            </summary>
        </member>
        <member name="M:Sharpility.Util.Sets.EmptySet``1">
            <summary>
            Creates empty immutable set.
            </summary>
            <typeparam name="T">Type of set item</typeparam>
            <returns>empty set</returns>
        </member>
        <member name="M:Sharpility.Util.Sets.EmptyMutableSet``1">
            <summary>
            Creates empty mutable set.
            </summary>
            <typeparam name="T">Type of set</typeparam>
            <returns>empty set</returns>
        </member>
        <member name="M:Sharpility.Util.Sets.Singleton``1(``0)">
            <summary>
            Creates single element immutable set.
            </summary>
            <typeparam name="T">Type of set item</typeparam>
            <param name="element">set element</param>
            <returns>single element set</returns>
        </member>
        <member name="M:Sharpility.Util.Sets.NullSafeSet``1(System.Collections.Generic.ISet{``0})">
            <summary>
            If given set is null returns empty set.
            </summary>
            <typeparam name="T">Type of set item</typeparam>
            <param name="set">set</param>
            <returns>null safe set</returns>
        </member>
        <member name="M:Sharpility.Util.Sets.AsSet``1(``0[])">
            <summary>
            Creates set from given values.
            </summary>
            <typeparam name="T">Type of set item</typeparam>
            <param name="values">Set values</param>
            <returns>set</returns>
        </member>
        <member name="M:Sharpility.Util.Sets.IsGenericSet(System.Object)">
            <summary>
            Chceks is object implements generic ISet interface.
            </summary>
            <param name="obj">Checked object</param>
            <returns>True if object is generic ISet</returns>
        </member>
        <member name="T:Sharpility.Util.Enums">
            <summary>
            Enums utility.
            </summary>
        </member>
        <member name="M:Sharpility.Util.Enums.ValueOf``1(System.String,System.Boolean)">
            <summary>
            Parse enum value by name.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">Parsed value</param>
            <param name="ignoreCase">Disabled by default. When set to true ignores enum name case</param>
            <returns>Type of enum</returns>
        </member>
        <member name="M:Sharpility.Util.Enums.ValueOf``1(System.String,``0,System.Boolean)">
            <summary>
            Tries to parse enum value by name.
            Returns defaultValue if fails to parse.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">parsed value</param>
            <param name="defaultValue">default enum value</param>
            <param name="ignoreCase">Disabled by default. When set to true ignores enum name case</param>
            <returns>Enum value or defaultValue</returns>
        </member>
        <member name="M:Sharpility.Util.Enums.TryValueOf``1(System.String,System.Boolean)">
            <summary>
            Tries to parse enum value by name.
            Returns Null if fails.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="value">parsed value</param>
            <param name="ignoreCase">Disabled by default. When set to true ignores enum name case</param>
            <returns>Enum value or Null</returns>
        </member>
        <member name="M:Sharpility.Util.Enums.Values``1">
            <summary>
            Return set of enum values.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <returns>set of enum values</returns>
        </member>
        <member name="M:Sharpility.Util.Enums.Ordinals``1">
            <summary>
            Returns set of enum int values.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <returns>set of enum values</returns>
        </member>
        <member name="M:Sharpility.Util.Enums.Names``1">
            <summary>
            Returns set of enum names.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <returns>set of enum names</returns>
        </member>
        <member name="T:Sharpility.Util.Numbers">
            <summary>
            Utilities for numbers.
            </summary>
        </member>
        <member name="M:Sharpility.Util.Numbers.TryParseShort(System.String)">
            <summary>
            Tries to parse short from string value.
            If value could not be parsed returns null.
            </summary>
            <param name="value">Parsed value</param>
            <returns>short or null</returns>
        </member>
        <member name="M:Sharpility.Util.Numbers.TryParseInt(System.String)">
            <summary>
            Tries to parse int from string value.
            If value could not be parsed returns null.
            </summary>
            <param name="value">Parsed value</param>
            <returns>int or null</returns>
        </member>
        <member name="M:Sharpility.Util.Numbers.TryParseLong(System.String)">
            <summary>
            Tries to parse long from string value.
            If value could not be parsed returns null.
            </summary>
            <param name="value">Parsed value</param>
            <returns>long or null</returns>
        </member>
        <member name="M:Sharpility.Util.Numbers.TryParseDouble(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to parse double from string value.
            If value could not be parsed returns null.
            </summary>
            <param name="value">Parsed value</param>
            <param name="format">Double format, default: NumberFormatInfo.InvariantInfo</param>
            <returns>double or null</returns>
        </member>
        <member name="M:Sharpility.Util.Numbers.TryParseDouble(System.String,System.Globalization.NumberStyles,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to parse double from string value.
            If value could not be parsed returns null.
            </summary>
            <param name="value">Parsed value</param>
            <param name="style">Style of double value</param>
            <param name="format">Double format, default: NumberFormatInfo.InvariantInfo</param>
            <returns>double or null</returns>
        </member>
        <member name="M:Sharpility.Util.Numbers.TryParseFloat(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to parse float from string value.
            If value could not be parsed returns null.
            </summary>
            <param name="value">Parsed value</param>
            <param name="format">Float format, default: NumberFormatInfo.InvariantInfo</param>
            <returns>float or null</returns>
        </member>
        <member name="M:Sharpility.Util.Numbers.TryParseFloat(System.String,System.Globalization.NumberStyles,System.Globalization.NumberFormatInfo)">
            <summary>
            Tries to parse float from string value.
            If value could not be parsed returns null.
            </summary>
            <param name="value">Parsed value</param>
            <param name="style">Style of float value</param>
            <param name="format">Double format, default: NumberFormatInfo.InvariantInfo</param>
            <returns>float or null</returns>
        </member>
        <member name="M:Sharpility.Util.Numbers.DecimalToDouble(System.Nullable{System.Decimal})">
            <summary>
            Converts nullable decimal value to nullable double.
            </summary>
            <param name="value">decimal value</param>
            <returns>double value</returns>
        </member>
        <member name="M:Sharpility.Util.Numbers.DoubleToDecimal(System.Nullable{System.Double})">
            <summary>
            Converts nullable double value to nullable decimal.
            </summary>
            <param name="value">double value</param>
            <returns>decimal value</returns>
        </member>
        <member name="T:Sharpility.Util.Objects">
            <summary>
            Objects utility.
            </summary>
        </member>
        <member name="M:Sharpility.Util.Objects.Hash(System.Object[])">
            <summary>
            Generates hashCode for elements.
            </summary>
            <param name="elements">elements</param>
            <returns>HashCode</returns>
        </member>
        <member name="M:Sharpility.Util.Objects.Equal(System.Object,System.Object)">
            <summary>
            Compares if objects are equals.
            Supports: Comparables, Dictionaries, Collections and Sets.
            </summary>
            <param name="first">Compared object</param>
            <param name="second">Compared object</param>
            <returns>True if elements are equals</returns>
        </member>
        <member name="M:Sharpility.Util.Objects.HashCode(System.Object)">
            <summary>
            Returns object HashCode. If object is ICollection generates hashCode of collection items.
            </summary>
            <param name="obj">object</param>
            <returns>HashCode</returns>
        </member>
        <member name="M:Sharpility.Util.Reflections.CurrentType(System.Int32,System.Type)">
            <summary>
            Returns type of object invoking this method.
            </summary>
            <param name="framesToSkip">Frames to skip, default: 1</param>
            <param name="excludedType">Excluded type</param>
            <returns>Type</returns>
        </member>
        <member name="M:Sharpility.Util.Reflections.Properties(System.Object,System.Boolean)">
            <summary>
            Returns ordered dictionary with object properties.
            </summary>
            <param name="obj">object</param>
            <param name="includeBase">Should include properties from object base class, default: false</param>
            <returns>Ordered dictionary with object properties</returns>
        </member>
        <member name="M:Sharpility.Util.Reflections.Fields(System.Object,System.Boolean)">
            <summary>
            Returns ordered dictionary with object fields.
            </summary>
            <param name="obj">object</param>
            <param name="includeBase">Should include fields from object base class, default: false</param>
            <returns>Ordered dictionary with object fields</returns>
        </member>
        <member name="M:Sharpility.Util.Reflections.CallingMethodName">
            <summary>
            Returns calling method name.
            </summary>
            <returns>method name</returns>
        </member>
        <member name="T:Sharpility.Util.Strings">
            <summary>
            Strings Utility.
            </summary>
        </member>
        <member name="M:Sharpility.Util.Strings.Length(System.String)">
            <summary>
            Returns length of given string.
            If string is NULL returns 0.
            </summary>
            <param name="value">given string</param>
            <returns>string length</returns>
        </member>
        <member name="M:Sharpility.Util.Strings.LimitedString(System.String,System.Int32)">
            <summary>
            Trims string to given length.
            </summary>
            <param name="value">string</param>
            <param name="length">maximum string length</param>
            <returns>string limtited to given length</returns>
        </member>
        <member name="M:Sharpility.Util.Strings.ToString(System.Object)">
            <summary>
            Converts object to string with collections and dictinoaries support.
            </summary>
            <param name="value">object converted string</param>
            <returns>generated string</returns>
        </member>
        <member name="M:Sharpility.Util.Strings.Format(System.String,System.Object[])">
            <summary>
            Decorated String.Format by pre formatting paramters.
            </summary>
            <param name="value">Formated string</param>
            <param name="parameters">Format parameters</param>
            <returns>Formatted string</returns>
        </member>
        <member name="T:Sharpility.Util.TimeSpans">
            <summary>
            Utilities for time span.
            </summary>
        </member>
        <member name="M:Sharpility.Util.TimeSpans.Max(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns maximum TimeSpan.
            </summary>
            <param name="first">First of compared time spans</param>
            <param name="second">Second of compared time spans</param>
            <returns>Maxmimum TimeSpan</returns>
        </member>
        <member name="M:Sharpility.Util.TimeSpans.Min(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns minimum TimeSpan.
            </summary>
            <param name="first">First of compared time spans</param>
            <param name="second">Second of compared time spans</param>
            <returns>Minimum TimeSpan</returns>
        </member>
        <member name="M:Sharpility.Util.TimeSpans.Abs(System.TimeSpan)">
            <summary>
            Returns absolute TimeSpan.
            </summary>
            <param name="timespan">TimeSpan</param>
            <returns>Absolute TimeSpan value</returns>
        </member>
        <member name="T:Sharpility.Util.ToStringHelper">
            <summary>
            Utility for building toString representation of object.
            </summary>
        </member>
        <member name="M:Sharpility.Util.ToStringHelper.Of(System.Object)">
            <summary>
            Creates new ToStringHelper for given object
            </summary>
            <param name="obj">object</param>
            <returns>ToStringHelper</returns>
        </member>
        <member name="M:Sharpility.Util.ToStringHelper.Add(System.String,System.Object)">
            <summary>
            Adds entry as 'name:value' in generated toString.
            </summary>
            <param name="name">Printed name</param>
            <param name="value">Printed value</param>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Util.ToStringHelper.AddProperties(System.Boolean)">
            <summary>
            Adds all object properties as entries in generated toString.
            </summary>
            <param name="includeBase">Should include base class properties, default: False</param>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Util.ToStringHelper.AddFields(System.Boolean)">
            <summary>
            Adds all object fields as entries in generated toString.
            </summary>
            <param name="includeBase">Should include base class properties, default: False</param>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Util.ToStringHelper.AddMembers(System.Boolean)">
            <summary>
            Adds all object properties and fields as entries in generated toString.
            </summary>
            <param name="includeBase">Should include base class properties and fields, default: False</param>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Util.ToStringHelper.SkipNulls(System.Boolean)">
            <summary>
            Skips printing null values.
            </summary>
            <param name="skip">Should skip printing null values, default: True</param>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Util.ToStringHelper.GenerateToStringOfProperties">
            <summary>
            Enables toString generation of object properties.
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Util.ToStringHelper.GenerateToStringOfFields">
            <summary>
            Enables toString generation of object fields.
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:Sharpility.Util.ToStringHelper.ToString">
            <summary>
            Builds object toString representation.
            </summary>
            <returns>toString</returns>
        </member>
        <member name="T:Sharpility.Base.Preconditions">
            <summary>
            Simple utility for data validation.
            </summary>
        </member>
        <member name="M:Sharpility.Base.Preconditions.Evaluate(System.Boolean,System.String)">
            <summary>
            Evaluates is statement is true and throws ArgumentException with given message if not.
            </summary>
            <param name="condition">Evaluated statement</param>
            <param name="errorMessage">Message thrown in ArgumentException</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.Evaluate(System.Func{System.Boolean},System.String)">
            <summary>
            Evaluates is callback statement is true and throws ArgumentException with given message if not.
            </summary>
            <param name="condition">Evaluated statement callback</param>
            <param name="errorMessage">Message thrown in ArgumentException</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.Evaluate(System.Boolean,System.Func{System.Exception})">
            <summary>
            Evaluates is statement is true and throws given exception if not.
            </summary>
            <param name="condition">Evaluated statement</param>
            <param name="exception">Supplier of thrown exception</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.Evaluate(System.Func{System.Boolean},System.Func{System.Exception})">
            <summary>
            Evaluates is statement is true and throws given exception if not.
            </summary>
            <param name="condition">Evaluated statement callback</param>
            <param name="exception">Supplier of thrown exception</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsNotNull(System.Object,System.String)">
            <summary>
            Evaulates is value is not null and throws ArgumentException with given message if not.
            </summary>
            <param name="value">Evaluated value</param>
            <param name="errorMessage">Message thrown in ArgumentException</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsNotNull(System.Object,System.Func{System.Exception})">
            <summary>
            Evaulates is value is not null and throws exception if not.
            </summary>
            <param name="value">Evaluated value</param>
            <param name="exception">Supplier of thrown exception</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsNull(System.Object,System.String)">
            <summary>
            Evaulates is value is null and throws ArgumentException with given message if not.
            </summary>
            <param name="value">Evaluated value</param>
            <param name="errorMessage">Message thrown in ArgumentException</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsNull(System.Object,System.Func{System.Exception})">
            <summary>
            Evaulates is value is null and throws exception if not.
            </summary>
            <param name="value">Evaluated value</param>
            <param name="exception">Supplier of thrown exception</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsNotEmpty(System.String,System.String)">
            <summary>
            Evaulates is string value is not null or empty and throws ArgumentException if not.
            </summary>
            <param name="value">Evaluated value</param>
            <param name="errorMessage">Message thrown in ArgumentException</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsNotEmpty(System.String,System.Func{System.Exception})">
            <summary>
            Evaulates is string value is not null or empty and throws exception if not.
            </summary>
            <param name="value">Evaluated value</param>
            <param name="exception">Supplier of thrown exception</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Evaulates is collection is not null or empty and throws ArgumentException if not.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="collection">Evaluated collection</param>
            <param name="errorMessage">Message thrown in ArgumentException</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Exception})">
            <summary>
            Evaulates is collection is not null or empty and throws exception if not.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="collection">Evaluated collection</param>
            <param name="exception">Supplier of thrown exception</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Evaulates is collection is empty and throws ArgumentException if not.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="collection">Evaluated collection</param>
            <param name="errorMessage">Message thrown in ArgumentException</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Exception})">
            <summary>
            Evaulates is collection is empty and throws exception if not.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="collection">Evaluated collection</param>
            <param name="exception">Supplier of thrown exception</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsSingleton``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Evaulates is collection contains only one element and throws ArgumentException if not.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="collection">Evaluated collection</param>
            <param name="errorMessage">Message thrown in ArgumentException</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.IsSingleton``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Exception})">
            <summary>
            Evaulates is collection contains only one element and throws exception if not.
            </summary>
            <typeparam name="T">Type of collection item</typeparam>
            <param name="collection">Evaluated collection</param>
            <param name="exception">Supplier of thrown exception</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.EvaluateEnum``1(System.String)">
            <summary>
            Evaluates is string value can be parsed to given enum type.
            If enumValue is invalid ArgumentException is thrown.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="enumValue">Evaluated enum value</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.EvaluateEnum``1(System.String,System.String)">
            <summary>
            Evaluates is string value can be parsed to given enum type.
            If enumValue is invalid ArgumentException is thrown.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="enumValue">Evaluated enum value</param>
            <param name="message">Message thrown in ArgumentException</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.EvaluateEnum``1(System.String,System.Func{System.Exception})">
            <summary>
            Evaluates is string value can be parsed to given enum type.
            If enumValue is invalid exception is thrown.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="enumValue">Evaluated enum value</param>
            <param name="exception">Supplier of thrown exception</param>
        </member>
        <member name="M:Sharpility.Base.Preconditions.EvaluateEnum``1(System.String,System.Converter{System.Collections.IEnumerator,System.Exception})">
            <summary>
            Evaluates is string value can be parsed to given enum type.
            If enumValue is invalid exception is thrown.
            </summary>
            <typeparam name="T">Type of enum</typeparam>
            <param name="enumValue">Evaluated enum value</param>
            <param name="exception">Supplier of thrown exception with additional enum values enumerator</param>
        </member>
    </members>
</doc>
